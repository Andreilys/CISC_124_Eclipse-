// Andrei Lyskov, 12al104, 10101635

// left to implement ~ computer Strategy
// implementing scanner class to query the user
// 
import java.util.Random;
import java.util.Scanner;

//TODO: clean up my assignment, organize the methods
//TODO: explore more complex strategy

public class Assn1_12al104 {
	final static int WINNING_SCORE = 100;
	//Used in method numToWord to to translate int to words
	final static String[] NUM_NAMES = {
		    "",
		    " one",
		    " two",
		    " three",
		    " four",
		    " five",
		    " six",
		    };
	private static Scanner screen;
	
	
	//TODO make a random number generator?
	//TODO: have someone proofread this assignment
	//rollDice generates and returns a random int from 1 to 6
	public static int rollDice() {
		Random r = new Random();
		int Low = 1;
		// 7 for all inclusive
		int High = 7;
		int roll = r.nextInt(High-Low) + Low;
		return roll;
	}
	
	/* playTurn takes in the total score for the current player, as well as whether its the computer or human playing.
	 It returns the total score + turn score which is used to update the current players game sum.*/
	public static int playTurn(int totalScore, boolean humansTurn) {
		int turnScore = 0;
		String currentPlayer = whoIsPlaying(humansTurn);
		boolean turnOver = false;
		while (!turnOver){
			if ((totalScore + turnScore) >= WINNING_SCORE){
				return (totalScore + turnScore);
			}
			//TODO turn into an array?
			int firstRoll = rollDice();
			int secondRoll = rollDice();
			String turnResponse = interpretDiceRoll(firstRoll, secondRoll, currentPlayer);
			//TODO switch to cases
			if (turnResponse == "Double Ones"){
				totalScore = 0;
				turnScore = 0;
				turnOver = true;
			}
			else if (turnResponse == "Single One") {
				turnScore = 0;
				turnOver = true;
			}
			else if (turnResponse == "Doubles") {
				turnScore += firstRoll + secondRoll;
				System.out.println(currentPlayer + " has a current turn sum of: " + turnScore + " and a game sum of: " + (turnScore + totalScore));
			}
			else {
				turnScore += firstRoll + secondRoll;
				System.out.println(currentPlayer + " has a current turn sum of: " + turnScore + " and a game sum of: " + (turnScore + totalScore));
				//TODO: should this be turned into a method?
				if ((totalScore + turnScore) >= WINNING_SCORE){
					return (totalScore + turnScore);
				}
				// TODO: turn into a variable?
				if (!interestInRolling(humansTurn, turnScore)){
					turnOver = true;
				}
			}
		}
		return (totalScore + turnScore);
	}
	
	
	//interestInRolling checks to see if the human is interested in rolling again and returns True or False.
	public static Boolean interestInRolling(boolean humansTurn, int turnScore){
		if(humansTurn){
			System.out.println("Roll again? (Enter 'y' or 'n'):");
			screen = new Scanner(System.in);
			String userInput = screen.nextLine();
			System.out.println(userInput);
			//TODO: should we check to make sure user input isn't malicious?
			switch(userInput) {
				case "y": case "Y":
			 		return true;
				case "n": case "N":
			 		return false;
				default:
					System.out.println("Incorrect entry, please enter either a y or n");
					if(interestInRolling(humansTurn, turnScore)){
						return true;
					}
					else{
						return false;
					}
			}
		} 
		else {
			//TODO come up with a better strategy for computer
			if (turnScore < 40){
				return true;
			} else {
				return false;
			}
		}
	
	}
	
	
	/*interpretDiceRoll takes in the current dicerolls, and current player, returning what type of 
	dice roll the current players turn turned out to be */
	public static String interpretDiceRoll(int diceRollOne, int diceRollTwo, String currentPlayer){		
		System.out.println(currentPlayer+" rolled:" + numToWord(diceRollOne) + " +" + numToWord(diceRollTwo));
		if (diceRollOne == 1 && diceRollTwo == 1){
			System.out.println("TURN OVER! Game and Turn sum set to 0");
			return "Double Ones";
		} 
		else if (diceRollOne == 1 || diceRollTwo == 1){
			System.out.println("TURN OVER! Turn sum is zero!");
			return "Single One";
		}
		else if (diceRollOne == diceRollTwo){
			return "Doubles";
		}
		else {
			return "Regular";
		}
	}
	
	
	//numToWord takes in a diceroll in the form of an int, and returns that int in a fully-spelled out form
	public static String numToWord(int diceRoll){
		return NUM_NAMES[diceRoll];
	}
	
	
	//CheckWinCondition takes in the current player as well as their score, and checks if they've won yet
	public static boolean checkWinCondition(String currentPlayer, int score)
	{
		if (score >= WINNING_SCORE){
			System.out.println(currentPlayer + " wins!");
			return true;
		}
		else {
			return false;
		}
	}
	
	
	//whoIsPlaying takes in the boolean of a humansTurn, then returns a string of player or computer
	public static String whoIsPlaying(boolean humansTurn) {
		String currentPlayer = "Player";
		if (!humansTurn){
			currentPlayer = "Computer";
		}
		return currentPlayer;
	}
	
	
	/* startGame takes in humans turn indicating who is playing, and the game over boolean which 
	is used to test if the game is over or not based on the win condition. */
	public static void startGame(boolean humansTurn, boolean gameOver) {
		int humanScore = 0;
		int computerScore = 0;
		int round = 2;
		while (!gameOver) {
			String currentPlayer = whoIsPlaying(humansTurn);
			System.out.println(currentPlayer +"'s turn is starting.");
			if (humansTurn){
				humanScore = playTurn(humanScore, humansTurn);
				gameOver = checkWinCondition(currentPlayer, humanScore);
				humansTurn = false;
			}
			else{			
				computerScore = playTurn(computerScore, humansTurn);
				gameOver = checkWinCondition(currentPlayer, computerScore);
				humansTurn = true;
			}
			round ++;
			if (round % 2 == 0 && !gameOver){
				//TODO: prompt user to press enter and wait until that happens
				System.out.println("Player's sum is: " + humanScore + ", Computer's sum is: " + computerScore + ". Press <enter> to start round " + round / 2);

			}
			
		}
		System.out.println("Concluding scores for the game were \n" + "Player: " + humanScore + "\n" + "Computer: " + computerScore + ". ");
	}
	

	//This is the main function which starts the program.
	public static void main(String[] args) {
		// the game starts with the human going first
		boolean humansTurn = true;
		boolean gameOver = false;
		startGame(humansTurn, gameOver);
	}

}
