/* Andrei Lyskov, 12al104, 10101635
This java file plays the game of pig versus a computer with two dice where the winning score goes to 100.
The computer's strategy is to stop rolling at a turn score of 40.
For more reading on the game of pig: https://en.wikipedia.org/wiki/Pig_(dice_game)
*/

import java.util.Random;
import java.util.Scanner;

public class Assn1_12al104 {
	final static int WINNING_SCORE = 100;
	static Random generator = new Random(System.currentTimeMillis());
	//Used in method numToWord to to translate int to words
	final static String[] NUM_NAMES = {
		    "",
		    " one",
		    " two",
		    " three",
		    " four",
		    " five",
		    " six",
		    };
	private static Scanner screen;
	
	//rollDice generates and returns a random int from 1 to 6
	public static int rollDice() {
		int Low = 1;
		// 7 for all inclusive
		int High = 7;
		int roll = generator.nextInt(High-Low) + Low;
		return roll;
	}
	
	/* playTurn takes in the total score for the current player, as well as whether its the computer or human playing.
	 It returns the total score + turn score which is used to update the current players game sum.*/
	public static int playTurn(int totalScore, boolean humansTurn) {
		int turnScore = 0;
		String currentPlayer = whoIsPlaying(humansTurn);
		boolean turnOver = false;
		while (!turnOver){
			if ((totalScore + turnScore) >= WINNING_SCORE){
				return (totalScore + turnScore);
			}
			int firstRoll = rollDice();
			int secondRoll = rollDice();
			//Returns a String which lets the program know what kind of roll occured
			String turnResponse = interpretDiceRoll(firstRoll, secondRoll, currentPlayer);
			if (turnResponse == "Double Ones"){
				totalScore = 0;
				turnScore = 0;
				turnOver = true;
			}
			else if (turnResponse == "Single One") {
				turnScore = 0;
				turnOver = true;
			}
			else if (turnResponse == "Doubles") {
				turnScore += firstRoll + secondRoll;
				System.out.println(currentPlayer + " has a current turn sum of: " + turnScore + " and a game sum of: "
				+ (turnScore + totalScore));
			}
			else {
				turnScore += firstRoll + secondRoll;
				System.out.println(currentPlayer + " has a current turn sum of: " + turnScore + " and a game sum of: " 
				+ (turnScore + totalScore));
				//checks to see if the player has won to avoid having to ask if they'd like to roll again
				if (checkWinCondition(currentPlayer, (turnScore+totalScore))){
					turnOver = true;
				}
				//Checks to see if the user would like to roll again
				if (!interestInRolling(humansTurn, turnScore)){
					turnOver = true;
				}
			}
		}
		return (totalScore + turnScore);
	}
	
	//interestInRolling checks to see if the human is interested in rolling again and returns True or False.
	public static Boolean interestInRolling(boolean humansTurn, int turnScore){
		if(humansTurn){
			System.out.println("Roll again? (Enter 'y' or 'n'):");
			screen = new Scanner(System.in);
			String userInput = screen.nextLine();
			System.out.println(userInput);
			switch(userInput) {
				case "y": case "Y":
			 		return true;
				case "n": case "N":
			 		return false;
				default:
					System.out.println("Incorrect entry, please enter either a y or n");
					if(interestInRolling(humansTurn, turnScore)){
						return true;
					}
					else {
						return false;
					}
			}
		} 
		else {
			if (turnScore < 40){
				return true;
			} else {
				return false;
			}
		}
	
	}
	
	/*interpretDiceRoll takes in the current dicerolls, and current player, returning what type of 
	dice roll the current players turn turned out to be */
	public static String interpretDiceRoll(int diceRollOne, int diceRollTwo, String currentPlayer) {		
		System.out.println(currentPlayer+" rolled:" + numToWord(diceRollOne) + " +" + numToWord(diceRollTwo));
		if (diceRollOne == 1 && diceRollTwo == 1){
			System.out.println("TURN OVER! Game and Turn sum set to 0");
			return "Double Ones";
		} 
		else if (diceRollOne == 1 || diceRollTwo == 1){
			System.out.println("TURN OVER! Turn sum is zero!");
			return "Single One";
		}
		else if (diceRollOne == diceRollTwo){
			return "Doubles";
		}
		else {
			return "Regular";
		}
	}
	
	//numToWord takes in a diceroll in the form of an int, and returns that int in a fully-spelled out form
	public static String numToWord(int diceRoll){
		return NUM_NAMES[diceRoll];
	}
	
	//CheckWinCondition takes in the current player as well as their score, and checks if they've won yet
	public static boolean checkWinCondition(String currentPlayer, int score){
		if (score >= WINNING_SCORE){
			System.out.println(currentPlayer + " wins!");
			return true;
		}
		else {
			return false;
		}
	}

	//whoIsPlaying takes in the boolean of a humansTurn, then returns a string of player or computer
	public static String whoIsPlaying(boolean humansTurn) {
		String currentPlayer = "Player";
		if (!humansTurn){
			currentPlayer = "Computer";
		}
		return currentPlayer;
	}
	
	/* startGame takes in humans turn indicating who is playing, and the game over boolean which 
	is used to test if the game is over or not based on the win condition. */
	public static void startGame(boolean humansTurn, boolean gameOver) {
		System.out.println("Welcome to the game of Pig! The game plays with 2 dice, and to a winning score of: " + WINNING_SCORE + 
				". Player rolls first in this game.");
		int humanScore = 0;
		int computerScore = 0;
		//This starts at round 2 
		int round = 0;
		while (!gameOver) {
			String currentPlayer = whoIsPlaying(humansTurn);
			System.out.println(currentPlayer +"'s turn is starting.");
			if (humansTurn){
				humanScore = playTurn(humanScore, humansTurn);
				gameOver = checkWinCondition(currentPlayer, humanScore);
				humansTurn = false;
			}
			else{			
				computerScore = playTurn(computerScore, humansTurn);
				gameOver = checkWinCondition(currentPlayer, computerScore);
				humansTurn = true;
			}
			round += 0.5;
			if (round / 1 == 0 && !gameOver){
				System.out.println("Player's sum is: " + humanScore + ", Computer's sum is: " + computerScore + 
						". Press <Enter> to start round " + round);
				//Brings up the scanner class and waits for any key to be pressed to start the next round;
				waitForEnter();
			}
			
		}
		System.out.println("Concluding scores for the game were: \n" + "Player: " + humanScore + "\n" + "Computer: " 
		+ computerScore);
	}
	
	public static void waitForEnter(){
		screen = new Scanner(System.in);
		String userInput = screen.nextLine();
	}

	public static void main(String[] args) {
		// The game starts with the human going first
		boolean humansTurn = true;
		boolean gameOver = false;
		startGame(humansTurn, gameOver);
	}

}
